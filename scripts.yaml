## DOOR ##

## MODE ##

## MOTION ##

# motion_light_timer_kitchen_end:
  # alias: MOTION.light.timer.kitchen.end
  # sequence:
  # - delay: 00:03:00
  # - service: switch.turn_off
    # entity_id: switch.kitchen_switch
# motion_light_timer_kitchen_start:
  # alias: MOTION.light.timer.kitchen.start
  # sequence:
  # - condition: state
    # entity_id: input_boolean.motion_light_kitchen
    # state: 'on'
  # - service: switch.turn_on
    # entity_id: switch.kitchen_switch
  # - service: script.turn_off
    # entity_id: script.motion_light_timer_kitchen_end
  # - service: automation.turn_on
    # entity_id: automation.motionendkitchen

mqtt_door_opened:
  alias: MQTT.Door.lastOpened
  sequence:
  - service: mqtt.publish
    data:
      topic: stat/hass/sensor/doorlastopened
      payload_template: "{\n  \"time\":\"{{ states('sensor.time') }}\",\n  \"date\"\
        :\"{{ states('sensor.date') }}\"\n}    \n"
      retain: 'true'

## PB ##
pb_debug:
  alias: PB.DEBUG
  sequence:
  - condition: state
    entity_id: input_boolean.n_debug
    state: 'on'
  - service: notify.pb
    data_template:
      title: 'HASS Debug : {{ title }}'
      message: '{{ states(''sensor.time'') }} : {{ text }}'
      data:
        url: '{{ states.sensor.ip_ext.state}}:7766'


pb_notify:
  alias: PB.NOTIFY
  sequence:
  - service: notify.pb
    data_template:
      title: 'HASS : {{ title }}'
      message: '{{ states(''sensor.time'') }} : {{ text }}'
      data:
        url: '{{ states.sensor.ip_ext.state}}:7766/'

## SECURETY ##
securety_entrance:
  alias: SECURETY.entrance
  sequence:
  - service: script.pb_notify
    data_template:
      title: Door Status
      text: Someone entered
securety_exit:
  alias: SECURETY.exit
  sequence:
  - service: script.pb_notify
    data_template:
      title: Home Status
      text: Someone Left Home

## UTIL ##
tv_shutdown_timer:
  alias: TV.shutdown_timer.
  sequence:
  - delay: 00:{{ states.input_slider.tv_timer.state | int }}:00
  - service: switch.turn_off
    entity_id: switch.tv

flash_red_kill:
  alias: Flash KIll
  sequence:
    # - service: script.turn_off
      # entity_id: script.flash_red
    - service: script.flash_green

flash_red:
  alias: Flash Hub Red
  sequence:
    - service: light.turn_on
      entity_id: light.gateway_light_34ce008c0676
      data:
        color_name: "red"
    # - delay:
        # seconds: 0.2
    # - service: light.turn_off
      # entity_id: light.gateway_light_34ce008c0676
    # - delay:
        # seconds: 1
    # - service: script.turn_on
      # data:
        # entity_id: script.flash_red_init

flash_green:
  alias: Flash Hub Green
  sequence:
    - service: light.turn_on
      entity_id: light.gateway_light_34ce008c0676
      data:
        color_name: "green"
    - delay:
        seconds: 1
    - service: light.turn_off
      entity_id: light.gateway_light_34ce008c0676
    - delay:
        seconds: 1
    # - service: script.turn_on
      # data:
        # entity_id: script.flash_red_init
        
flash_red_init:
  alias: Flash Hub init
  sequence:
    - service: script.turn_off
      data:
        entity_id: script.flash_red
    - service: script.turn_on
      data:
        entity_id: script.flash_red

## CLIMA ##   
 
##NOT USED##
# motion_light_timer_hall_end_kill:
  # alias: motion.light.timer.hall.end.kill
  # sequence:
  # - condition: state
    # entity_id: script.motion_light_timer_hall_end
    # state: 'on'
  # - service: homeassistant.turn_off
    # entity_id: script.motion_light_timer_hall_end
## rf_mqtt_delay_tv:
  # alias: Turn hall off after X minutes
  # sequence:
  # - service: switch.toggle
    # data:
      # entity_id: switch.tv
  # - delay: 00:00:01
 
 # pb_start_state:
  # alias: System started notify
  # sequence:
  # - service: notify.pb
    # data_template:
      # title: Home Asistant Started
      # message: '{{ states(''sensor.time'') }}'