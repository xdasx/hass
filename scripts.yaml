## DOOR ##
door_in:
  alias: 'DOOR: IN'
  sequence:
  - condition: state
    entity_id: sensor.motion_event
    state: Idle
  - data:
      entity_id: input_select.door_event
      option: Someone entered
    service: input_select.select_option
  - service: script.door_in_mode
  - service: script.door_light_hall_timer
  - service: script.securety_entrance
door_in_mode:
  alias: 'DOOR: IN - change  mode'
  sequence:
  - condition: state
    entity_id: input_select.mode
    state: Away
  - data:
      entity_id: input_select.mode
      option: Home
    service: input_select.select_option
door_light_hall_timer:
  alias: DOOR.light.hall.timer
  sequence:
  - service: switch.turn_on
    entity_id: switch.hall_switch
  - service: homeassistant.turn_off
    entity_id: input_boolean.motion_light
  - delay: 00:{{ states.input_slider.door_light_delay.state | int }}:00
  - service: switch.turn_off
    entity_id: switch.hall_switch
  - service: homeassistant.turn_on
    entity_id: input_boolean.motion_light
  - service: input_select.select_option
    data:
      entity_id: input_select.door_event
      option: Door Closed
door_out:
  alias: DOOR.out
  sequence:
  - condition: template
    value_template: '{{ states.sensor.motion_event.state != "Away" }}'
  - condition: state
    entity_id: input_select.door_event
    state: Door Opened
  - service: script.door_out_away_init
  - service: input_select.select_option
    data:
      entity_id: input_select.door_event
      option: Someone left
  - service: script.securety_exit
  
door_out_away_init:
  alias: DOOR.out.away.init
  sequence:
  - service: homeassistant.turn_off
    entity_id: script.door_out_away
  - service: script.door_out_away
  - service: script.device_away_jane
  - service: script.device_away_dmitri
door_out_away:
  alias: DOOR.out.away
  sequence:
  - service: script.pb_debug
    data:
      title: Looking for activity
      text: Timer is set for {{ states.input_slider.door_away_delay.state | int }} min
  - service: script.flash_red_init
  - delay: 00:{{ states.input_slider.door_away_delay.state | int }}:00
  - service: input_select.select_option
    data:
      entity_id: input_select.mode
      option: Away
  - service: input_select.select_option
    data:
      entity_id: input_select.door_event
      option: Door Closed
  - service: script.pb_debug
    data:
      title: Status Away
      text: No movement detected
door_out_away_kill:
  alias: DOOR.out.away.kill
  sequence:
  - condition: state
    entity_id: script.door_out_away
    state: 'on'
  - service: homeassistant.turn_off
    entity_id: script.door_out_away
  - service: script.pb_debug
    data:
      title: Status Home
      text: Movement detected
  - service: script.flash_red_kill
  - service: input_select.select_option
    data:
      entity_id: input_select.door_event
      option: Door Closed

## MODE ##
mode_at_home:
  alias: AtHome Mode
  sequence:
  - entity_id: input_boolean.motion_light
    service: homeassistant.turn_on
  - entity_id: input_boolean.motion_light_kitchen
    service: homeassistant.turn_on
  - entity_id: switch.tv
    service: switch.turn_on
  - service: script.pb_mode
  - service: mqtt.publish
    data:
      payload_template: '{{ states(''input_select.mode'') }}'
      retain: 'true'
      topic: stat/hass/mode
  - service: climate.set_temperature
    data_template:
      entity_id: climate.room
      temperature: "{{ states.sensor.home_temp.state | float }}"
    
mode_away:
  alias: Away Mode
  sequence:
  - service: homeassistant.turn_off
    entity_id: input_boolean.motion_light
  - service: homeassistant.turn_off
    entity_id: input_boolean.motion_light_kitchen
  - service: homeassistant.turn_off
    entity_id: group.light
  - service: homeassistant.turn_off
    entity_id: switch.hall
  - service: homeassistant.turn_off
    entity_id: switch.tv
  - service: script.pb_mode
  - service: mqtt.publish
    data:
      topic: stat/hass/mode
      payload_template: '{{ states(''input_select.mode'') }}'
      retain: 'true'
  - service: climate.set_temperature
    data_template:
      entity_id: climate.room
      temperature: "{{ states.sensor.away_temp.state | float }}"
    
mode_zzz:
  alias: Zzz Mode
  sequence:
  - service: homeassistant.turn_off
    entity_id: input_boolean.motion_light
  - service: homeassistant.turn_off
    entity_id: input_boolean.motion_light_kitchen
  - service: homeassistant.turn_off
    entity_id: group.light
  - service: switch.turn_off
    entity_id: switch.hall
  - service: switch.turn_off
    entity_id: switch.tv
  - service: script.pb_mode
  - service: mqtt.publish
    data:
      topic: stat/hass/mode
      payload_template: '{{ states(''input_select.mode'') }}'
      retain: 'true'

## MOTION ##
motion_light_timer_hall_end:
  alias: MOTION.light.timer.hall.end
  sequence:
  - delay: 00:00:30
  - service: switch.turn_off
    entity_id: switch.hall
motion_light_timer_hall_start:
  alias: MOTION.light.timer.hall.start
  sequence:
  - condition: state
    entity_id: input_boolean.motion_light
    state: 'on'
  - service: script.turn_off
    entity_id: script.motion_light_timer_hall_end
  - service: switch.turn_on
    entity_id: switch.hall
  - service: automation.turn_on
    entity_id: automation.motionendhall
# motion_light_timer_kitchen_end:
  # alias: MOTION.light.timer.kitchen.end
  # sequence:
  # - delay: 00:03:00
  # - service: switch.turn_off
    # entity_id: switch.kitchen_switch
# motion_light_timer_kitchen_start:
  # alias: MOTION.light.timer.kitchen.start
  # sequence:
  # - condition: state
    # entity_id: input_boolean.motion_light_kitchen
    # state: 'on'
  # - service: switch.turn_on
    # entity_id: switch.kitchen_switch
  # - service: script.turn_off
    # entity_id: script.motion_light_timer_kitchen_end
  # - service: automation.turn_on
    # entity_id: automation.motionendkitchen
motion_light_timer_room_end:
  alias: MOTION.light.timer.room.end
  sequence:
  - delay: 00:03:00
  - service: switch.turn_off
    entity_id: switch.living_switch_1
motion_light_timer_room_start:
  alias: MOTION.light.timer.room.start
  sequence:
  - condition: state
    entity_id: input_boolean.motion_light_room
    state: 'on'
  - service: switch.turn_on
    entity_id: switch.living_switch_1
  - service: script.turn_off
    entity_id: script.motion_light_timer_room_end
  - service: automation.turn_on
    entity_id: automation.motionendroom
motion_watchdog:
  alias: MOTION.watchdog
  sequence:
  - delay: 00:{{ states.input_slider.motion_watchdog_delay.state | int }}:00
  - service: input_select.select_option
    data:
      entity_id: input_select.motion_event
      option: Idle
motion_watchdog_init:
  alias: MOTION.watchdog.init
  sequence:
  - service: script.door_out_away_kill
  - service: input_select.select_option
    entity_id: input_select.motion_event
    data_template:
      option: '{{ place }}'
  - service: script.motion_watchdog_kill
  - service: script.motion_watchdog
motion_watchdog_kill:
  alias: MOTION.watchdog.kill
  sequence:
  - condition: state
    entity_id: script.motion_watchdog
    state: 'on'
  - service: homeassistant.turn_off
    entity_id: script.motion_watchdog
mqtt_door_opened:
  alias: MQTT.Door.lastOpened
  sequence:
  - service: mqtt.publish
    data:
      topic: stat/hass/sensor/doorlastopened
      payload_template: "{\n  \"time\":\"{{ states('sensor.time') }}\",\n  \"date\"\
        :\"{{ states('sensor.date') }}\"\n}    \n"
      retain: 'true'

## PB ##
pb_debug:
  alias: PB.DEBUG
  sequence:
  - condition: state
    entity_id: input_boolean.n_debug
    state: 'on'
  - service: notify.pb
    data_template:
      title: 'HASS Debug : {{ title }}'
      message: '{{ states(''sensor.time'') }} : {{ text }}'
      data:
        url: '{{ states.sensor.ip_ext.state}}:7766'
pb_door_opened:
  alias: Send Door state to PB
  sequence:
  - service: script.pb_debug
    data_template:
      title: Home door Status
      text: ' Door {% if states.binary_sensor.front_door.state == ''on'' %} Open {%
        elif states.binary_sensor.front_door.state == ''off'' %} Closed {% else %}
        n/a {% endif %}'
pb_mode:
  alias: Send Mode state to PB
  sequence:
  - service: script.pb_debug
    data_template:
      title: Mode
      text: Mode Changed  to {{ states('input_select.mode') }}
pb_motion_state:
  alias: Send Motion state to PB
  sequence:
  - condition: state
    entity_id: input_boolean.n_motion
    state: 'on'
  - service: script.pb_debug
    data_template:
      title: MOTION Status
      text: Motion detected
pb_notify:
  alias: PB.NOTIFY
  sequence:
  - service: notify.pb
    data_template:
      title: 'HASS : {{ title }}'
      message: '{{ states(''sensor.time'') }} : {{ text }}'
      data:
        url: '{{ states.sensor.ip_ext.state}}:7766/'

## SECURETY ##
securety_entrance:
  alias: SECURETY.entrance
  sequence:
  - service: script.pb_notify
    data_template:
      title: Door Status
      text: Someone entered
securety_exit:
  alias: SECURETY.exit
  sequence:
  - service: script.pb_notify
    data_template:
      title: Home Status
      text: Someone Left Home

## UTIL ##
tv_shutdown_timer:
  alias: TV.shutdown_timer.
  sequence:
  - delay: 00:{{ states.input_slider.tv_timer.state | int }}:00
  - service: switch.turn_off
    entity_id: switch.tv

flash_red_kill:
  alias: Flash KIll
  sequence:
    # - service: script.turn_off
      # entity_id: script.flash_red
    - service: script.flash_green

flash_red:
  alias: Flash Hub Red
  sequence:
    - service: light.turn_on
      entity_id: light.gateway_light_34ce008c0676
      data:
        color_name: "red"
    # - delay:
        # seconds: 0.2
    # - service: light.turn_off
      # entity_id: light.gateway_light_34ce008c0676
    # - delay:
        # seconds: 1
    # - service: script.turn_on
      # data:
        # entity_id: script.flash_red_init

flash_green:
  alias: Flash Hub Green
  sequence:
    - service: light.turn_on
      entity_id: light.gateway_light_34ce008c0676
      data:
        color_name: "green"
    - delay:
        seconds: 1
    - service: light.turn_off
      entity_id: light.gateway_light_34ce008c0676
    - delay:
        seconds: 1
    # - service: script.turn_on
      # data:
        # entity_id: script.flash_red_init
        
flash_red_init:
  alias: Flash Hub init
  sequence:
    - service: script.turn_off
      data:
        entity_id: script.flash_red
    - service: script.turn_on
      data:
        entity_id: script.flash_red

## CLIMA ##    
mqtt_temp_set:
  alias: Save Temperatures
  sequence:
  - service: mqtt.publish
    data:
      topic: home/clima/home
      payload_template: '{{ states(''input_slider.clima_home_temp'') }}'
      retain: 'true'
  - service: mqtt.publish
    data:
      topic: home/clima/away
      payload_template: '{{ states(''input_slider.clima_away_temp'') }}'
      retain: 'true'
      
save_home_temp:
  alias: Save Home Temperature
  sequence:
  - condition: state
    entity_id: input_select.mode
    state: 'Home'
  - service: mqtt.publish
    data:
      topic: home/clima/home
      payload_template: '{{ states.sensor.climate_room_temp.state }}'
      retain: 'true'
  - service: script.pb_debug
    data_template:
      title: CLIMA
      text: Home Temperature {{ states.input_slider.clima_home_temp.state }} Saved 
      
warmup:
  alias: Warmup
  sequence:
  - service: climate.set_temperature
    data_template:
      entity_id: climate.room
      temperature: "{{ states.sensor.home_temp.state | float }}"
  - service: script.pb_debug
    data_template:
      title: CLIMA
      text: Home Temperature {{ states.sensor.home_temp.state }} Saved 

## DEVICE TRACKER ##
device_in_dmitri:
  alias: Device In Dmitri
  sequence:
  - condition: state
    entity_id: device_tracker.dmitri
    state: 'home'
  - service: automation.turn_on
    entity_id: automation.devicearchyhome
device_in_jane:
  alias: Device In Jane
  sequence:
  - condition: state
    entity_id: device_tracker.jane
    state: 'home'
  - service: automation.turn_on
    entity_id: automation.devicejanehome
device_away_dmitri:
  alias: Device Tracker Dmitri
  sequence:
  - service: automation.turn_on
    entity_id: automation.devicearchyout
  - service: script.pb_debug
    data:
      title: Looking for OP3
      text: Timer is set for {{ states.input_slider.device_out_delay.state | int }} min
  - delay: 00:{{ states.input_slider.device_out_delay.state | int }}:00
  - service: automation.turn_off
    entity_id: automation.devicearchyout
  # - service: automation.turn_on
    # entity_id: automation.devicearchyhome
   
device_away_jane:
  alias: Device Tracker Jane
  sequence:
  - service: automation.turn_on
    entity_id: automation.devicejaneout
  - service: script.pb_debug
    data:
      title: Looking for arS7
      text: Timer is set for {{ states.input_slider.device_out_delay.state | int }} min
  - delay: 00:{{ states.input_slider.device_out_delay.state | int }}:00
  - service: automation.turn_off
    entity_id: automation.devicejaneout    
  # - service: automation.turn_on
    # entity_id: automation.devicejanehome 
##NOT USED##
# motion_light_timer_hall_end_kill:
  # alias: motion.light.timer.hall.end.kill
  # sequence:
  # - condition: state
    # entity_id: script.motion_light_timer_hall_end
    # state: 'on'
  # - service: homeassistant.turn_off
    # entity_id: script.motion_light_timer_hall_end
## rf_mqtt_delay_tv:
  # alias: Turn hall off after X minutes
  # sequence:
  # - service: switch.toggle
    # data:
      # entity_id: switch.tv
  # - delay: 00:00:01
 
 # pb_start_state:
  # alias: System started notify
  # sequence:
  # - service: notify.pb
    # data_template:
      # title: Home Asistant Started
      # message: '{{ states(''sensor.time'') }}'